<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spiker00t on ret2school</title>
    <link>https://ret2school.github.io/tags/spiker00t/</link>
    <description>Recent content in spiker00t on ret2school</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ret2school.github.io/tags/spiker00t/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[ImaginaryCTF 2023 - reverse] Sheepish</title>
      <link>https://ret2school.github.io/post/sheepish/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/sheepish/</guid>
      <description>ImaginaryCTF 2023 - Write-Up for the challenge Sheepish (Reverse) TL;DR: Obfuscated Python code using lambda-calculus.
Description: Mary had a flagchecker, its fleece was white as snow.
Introduction We are given a Python script, consisting in a single line of ~26k characters, with lots of lambda-functions. The full script is available here , see the beginning and the end of the file below.
print((((lambda _____________:((lambda ___:_____________(lambda _______:___(___)(_______)))(lambda ___:_____________(lambda _______:___(___)(_______)))))(lambda _____________:lambda ___________:lambda ______:(lambda ____:(lambda _:_(lambda __________:lambda _____:__________))(____))(___________)(lambda _:(lambda __________:lambda _____:__________))(lambda _:(lambda __________:lambda _____:__________(_____)(lambda __________:lambda _____:_____))((lambda __________:lambda _____:(lambda __________:lambda _____:__________(_____)(lambda __________:lambda _____:_____))((lambda __________:lambda _____:(lambda __________:__________(lambda _:(lambda __________:lambda _____:_____))(lambda __________:lambda _____:__________)) [.</description>
    </item>
    
    <item>
      <title>[Grey Cat CTF Quals 2023 - reverse] crackme1</title>
      <link>https://ret2school.github.io/post/crackme1_greycat/</link>
      <pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/crackme1_greycat/</guid>
      <description>TL;DR: A challenge with obfuscated JavaScript, with some WebGL shaders to reverse.
Description: When the correct key is entered, you will see a nice image.
When we open the webpage, we can first inspect the HTML code.
&amp;lt;body&amp;gt; &amp;lt;canvas id=&amp;#34;c&amp;#34;&amp;gt;&amp;lt;/canvas&amp;gt; &amp;lt;div class=&amp;#34;input-container&amp;#34;&amp;gt; &amp;lt;input id=&amp;#34;textInput&amp;#34; type=&amp;#34;text&amp;#34; placeholder=&amp;#34;Enter Key&amp;#34;&amp;gt; &amp;lt;button id=&amp;#34;submitButton&amp;#34; class=&amp;#34;submit-button&amp;#34;&amp;gt;Submit&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;p id=&amp;#34;flag&amp;#34;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;script src=&amp;#34;https://webgl2fundamentals.org/webgl/resources/webgl-utils.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;https://webgl2fundamentals.org/webgl/resources/m4.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;/app.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; We can first see that there is an empty &amp;lt;p&amp;gt; tag with id flag, which will probably be used to display the flag when the correct key is entered.</description>
    </item>
    
  </channel>
</rss>
