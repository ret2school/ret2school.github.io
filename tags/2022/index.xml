<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2022 on ret2school</title>
    <link>https://ret2school.github.io/tags/2022/</link>
    <description>Recent content in 2022 on ret2school</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ret2school.github.io/tags/2022/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[ImaginaryCTF 2023 - pwn] window-of-opportunity</title>
      <link>https://ret2school.github.io/post/iwindow/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/iwindow/</guid>
      <description>window-of-opportunity  window-of-opportunity (490 pts) - 11 solves by Eth007
Description: Sometimes, there is a glimmer of hope, a spark of inspiration, a window of opportunity.
Attachments https://imaginaryctf.org/r/izYM0#opportunity_dist.zip
nc window-of-opportunity.chal.imaginaryctf.org 1337
 window-of-opportunity is a kernel exploitation challenge I did for the ImaginaryCTF 2023. We are given an arbitrary read primitive (and a stack buffer overflow but I didn&amp;rsquo;t use it), and the goal is basically to read the /flag.txt file.</description>
    </item>
    
    <item>
      <title>[corCTF 2022 - pwn] zigzag</title>
      <link>https://ret2school.github.io/post/zigzag/</link>
      <pubDate>Mon, 08 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/zigzag/</guid>
      <description>Introduction zigzag is a zig heap challenge I did during the corCTF 2022 event. It was pretty exotic given we have to pwn a heap like challenge written in zig. It is not using the C allocator but instead it uses the GeneralPurposeAllocator, which makes the challenge even more interesting. Find the tasks here.
TL; DR  Understanding zig GeneralPurposeAllocator internals Hiijack the BucketHeader of a given bucket to get a write what were / read what where primitive.</description>
    </item>
    
    <item>
      <title>[corCTF 2022 - pwn] cshell2</title>
      <link>https://ret2school.github.io/post/cshell2/</link>
      <pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/cshell2/</guid>
      <description>Introduction cshell2 is a heap challenge I did during the corCTF 2022 event. It was pretty classic so I will not describe a lot. If you begin with heap challenges, I advice you to read previous heap writeup.
TL; DR  Fill tcache. Heap overflow in edit on the bio field which allows to leak the address of the unsortedbin. Leak heap and defeat safe-linking to get an arbitrary write through tcache poisoning.</description>
    </item>
    
    <item>
      <title>[diceCTF 2022 - pwn] catastrophe</title>
      <link>https://ret2school.github.io/post/catastrophe/</link>
      <pubDate>Thu, 28 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/catastrophe/</guid>
      <description>Introduction  I just learned how to use malloc and free&amp;hellip; am I doing this right?
 catastrophe is a heap challenge I did during the diceCTF 2022. I did have a lot of issues with the libc and the dynamic linker, thus I did a first time the challenge with the libc that was in /lib/libc.so.6, then I figured out thanks to my teammate supersnail that I was using the wrong libc.</description>
    </item>
    
    <item>
      <title>[Breizh CTF 2022 - web] La galette à tout prix</title>
      <link>https://ret2school.github.io/post/galette/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/galette/</guid>
      <description>We are given a JWT. It contains a field kid which is the name of the file containing the key to sign the JWT :
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IiciLCJ3YWxsZXQiOltdLCJraWQiOiIuL3NlY3JldC5rZXkifQ.sPF55gkdqUQqAfkeBFtQRWOZgh_4S2jaIEJz2FcUsp8 header : {&amp;quot;typ&amp;quot;:&amp;quot;JWT&amp;quot;,&amp;quot;alg&amp;quot;:&amp;quot;HS256&amp;quot;} payload : {&amp;quot;username&amp;quot;:&amp;quot;&#39;&amp;quot;,&amp;quot;wallet&amp;quot;:[],&amp;quot;kid&amp;quot;:&amp;quot;./secret.key&amp;quot;} If we edit kid with a file that we already know the content (such as /dev/null) we can sign any JWT.
import jwt FILENAME = &amp;quot;/dev/null&amp;quot; key = open(FILENAME).read(32) jwt.encode({&amp;quot;username&amp;quot;:&amp;quot;Monsieur Rennes Whisky&amp;quot;,&amp;quot;wallet&amp;quot;:[f&amp;quot;2 union {sql}&amp;quot;],&amp;quot;kid&amp;quot;:FILENAME}, key=key, algorithm=&amp;quot;HS256&amp;quot;) # it provides us a valid JWT :) We then discover that there is an SQL injection with wallet.</description>
    </item>
    
    <item>
      <title>[Breizh CTF 2022 - web] Les crèmes de Mamie Loic</title>
      <link>https://ret2school.github.io/post/cremes_mamie/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/cremes_mamie/</guid>
      <description>Les crèmes de Mamie Loic (1/2) The first challenge was an IDOR.
We have to get the basket of the user mamie, so we can just change /api/getbasket?name=YOUR_USER to /api/getbasket?name=mamie and get the flag : https://les-cremes-de-madame-loic.ctf.bzh:21000/api/getbasket?name=mamie
La recette secrete est composee de : - Lait - Un maximum de BZHCTF{m4m13_n4_p4s_4ppr1s_d3_c3s_3err3urs!!} - Caramel Il faudra aussi penser a mettre des images pour les produits et a gerer la migration de base de donnees, l&#39;implémentation a commencé ici : /mamiesecret Pour se faire, n&#39;oublie pas d&#39;utiliser les identifiants suivants : - mamiemanager / sxEpnMggi8LtD1y198Iy Les crèmes de Mamie Loic (2/2) We now have the credentials for the user mamiemanager and the knowledge of the endpoint /mamiesecret.</description>
    </item>
    
    <item>
      <title>[Breizh CTF 2022 - prog] PYCTHON</title>
      <link>https://ret2school.github.io/post/pycthon/</link>
      <pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/pycthon/</guid>
      <description>Description: Nous n&#39;arrivons pas à retrouver l&#39;information cachée à partir de ce fichier... Auteur: T0fix Format : BZHCTF{}  The provided file is a .pyc which contains compiled pseudo-code for a program written in Python.
You just have to use the uncompyle6 package with the following command: uncompyle6 -o .pycthon.cpython-38.pyc
We obtain then, the source python code:
def hoflag(): tab = [ &amp;#39;U&amp;#39;, &amp;#39;n&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;0&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;p&amp;#39;, &amp;#39;y&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;_&amp;#39;, &amp;#39;P&amp;#39;, &amp;#39;y&amp;#39;, &amp;#39;t&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;0&amp;#39;, &amp;#39;n&amp;#39;, &amp;#39;_&amp;#39;, &amp;#39;f&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;E&amp;#39;] flag = &amp;#39;&amp;#39;.</description>
    </item>
    
    <item>
      <title>[Breizh CTF 2022 - pwn] Faible Ty Reseau</title>
      <link>https://ret2school.github.io/post/ftm/</link>
      <pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/ftm/</guid>
      <description>Faible Ty Réseau is a basic heap-like challenge, it allows us to create a configuration, edit it, call a function pointer on it and finally to free it:
int __cdecl main(int argc, const char **argv, const char **envp) { int v4; // [rsp+4h] [rbp-Ch] BYREF  unsigned __int64 v5; // [rsp+8h] [rbp-8h]  v5 = __readfsqword(0x28u); while ( 1 ) { puts(aVousN); printf(a1ModifierLesPa, argv); fflush(stdout); v4 = 0; argv = &amp;amp;v4; __isoc99_scanf(&amp;amp;unk_21F3, &amp;amp;v4); switch ( v4 ) { case 0: printf(&amp;#34;wtf ?</description>
    </item>
    
    <item>
      <title>[Breizh CTF 2022 - reverse] L&#39;appli secrète du breizhCTF</title>
      <link>https://ret2school.github.io/post/app-secrete-du-breizhctf/</link>
      <pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/app-secrete-du-breizhctf/</guid>
      <description>Value: 131 Description: En arrivant à Rennes au BreizhCTF, vous avez trouvé un téléphone par terre et avez décidé de le garder avec vous. Vous vous rendez compte que sur ce téléphone, il y a une appli &#39;SuperSecretApp&#39;. Malheureusement, pour accéder à son contenu, vous devez avoir la bonne combinaison du username et du password. Vous avez donc décidé de reverse l&#39;application pour trouvez cela! Auteur: Worty Format : BZHCTF{username-password}  The file provided is an .</description>
    </item>
    
    <item>
      <title>[Breizh CTF 2022- Forensic] La livraison de pizza</title>
      <link>https://ret2school.github.io/post/livraison-de-pizza/</link>
      <pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/livraison-de-pizza/</guid>
      <description>Value: 50 Description: Un nouvel employé travaille tranquillement à son bureau, quand quelqu&#39;un se présente devant pour &#39;Livraison de galettes saucisses&#39;. Il est nouveau, mais il se dit qu&#39;en Bretagne, après tout, cela doit arriver. Il est donc venu dans votre bureau vous demandez si vous aviez commandé, mais votre réponse est non. Il revient tout paniqué en vous disant que son anvitirus a enregistré un traffic USB inhabituel. L&#39;anvitirus de votre entreprise est configuré pour prendre des dumps réseaux de tout le traffic, même le traffic USB !</description>
    </item>
    
    <item>
      <title>[Breizh CTF 2022- misc] My homework... NO !</title>
      <link>https://ret2school.github.io/post/my-homework...-no-/</link>
      <pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/my-homework...-no-/</guid>
      <description>Description: Je dois rendre mon tp ce soir mais j&#39;ai supprimé le dossier où se trouvaient mes bianires. Par chance il tourne encore, pouvez-vous m&#39;aider à le récupérer ? Login/Password : gaston:gaston ssh challenges.ctf.bzh:24001 Auteur: LaChenilleBarbue Format : BZHCTF{sha512sum(binaire)}  Let&amp;rsquo;s start by connecting to the server with the credentials we have been given and list the processes that are running:
&amp;gt; ssh challenges.ctf.bzh -p 24001 -l gaston gaston@challenges.ctf.bzh&#39;s password: gaston@726bc5597730:~$ ps -aux USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.</description>
    </item>
    
    <item>
      <title>[Breizh CTF 2022- reverse] Baby</title>
      <link>https://ret2school.github.io/post/baby/</link>
      <pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/baby/</guid>
      <description>Value: 50 Description: Le reverse c&#39;est quand même vachement compliqué... ou pas ? Auteur: Worty Format : BZHCTF{}  Like all the CTF challenges named &amp;ldquo;Baby&amp;rdquo;, this challenge was very simple.
You just had to open the source code in radare2 to see the flag in clear:
&amp;gt; r2 baby [0x00001070]&amp;gt; aaa [Cannot find function at 0x00001070 sym. and entry0 (aa) [x] Analyze all flags starting with sym. and entry0 (aa) [x] Analyze function calls (aac) [x] Analyze len bytes of instructions for references (aar) [x] Check for objc references [x] Check for vtables [x] Type matching analysis for all functions (aaft) [x] Propagate noreturn information [x] Use -AA or aaaa to perform additional experimental analysis.</description>
    </item>
    
  </channel>
</rss>
