<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ImaginaryCTF on ret2school</title>
    <link>https://ret2school.github.io/tags/imaginaryctf/</link>
    <description>Recent content in ImaginaryCTF on ret2school</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ret2school.github.io/tags/imaginaryctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[ImaginaryCTF 2023 - pwn] mailman</title>
      <link>https://ret2school.github.io/post/mailman/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/mailman/</guid>
      <description>mailman  mailman (423 pts) - 31 solves by Eth007
Description
I&amp;rsquo;m sure that my post office is 100% secure! It uses some of the latest software, unlike some of the other post offices out there&amp;hellip; Flag is in ./flag.txt.
Attachments https://imaginaryctf.org/r/PIxtO#vuln https://imaginaryctf.org/r/c9Mk8#libc.so.6
nc mailman.chal.imaginaryctf.org 1337
 mailman is a heap challenge I did for the ImaginaryCTF 2023 event. It was a basic heap challenge involving tcache poisoning, safe-linking and seccomp bypass.</description>
    </item>
    
    <item>
      <title>[ImaginaryCTF 2023 - pwn] window-of-opportunity</title>
      <link>https://ret2school.github.io/post/iwindow/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/iwindow/</guid>
      <description>window-of-opportunity  window-of-opportunity (490 pts) - 11 solves by Eth007
Description: Sometimes, there is a glimmer of hope, a spark of inspiration, a window of opportunity.
Attachments https://imaginaryctf.org/r/izYM0#opportunity_dist.zip
nc window-of-opportunity.chal.imaginaryctf.org 1337
 window-of-opportunity is a kernel exploitation challenge I did for the ImaginaryCTF 2023. We are given an arbitrary read primitive (and a stack buffer overflow but I didn&amp;rsquo;t use it), and the goal is basically to read the /flag.txt file.</description>
    </item>
    
    <item>
      <title>[ImaginaryCTF 2023 - reverse] Sheepish</title>
      <link>https://ret2school.github.io/post/sheepish/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/sheepish/</guid>
      <description>ImaginaryCTF 2023 - Write-Up for the challenge Sheepish (Reverse) TL;DR: Obfuscated Python code using lambda-calculus.
Description: Mary had a flagchecker, its fleece was white as snow.
Introduction We are given a Python script, consisting in a single line of ~26k characters, with lots of lambda-functions. The full script is available here , see the beginning and the end of the file below.
print((((lambda _____________:((lambda ___:_____________(lambda _______:___(___)(_______)))(lambda ___:_____________(lambda _______:___(___)(_______)))))(lambda _____________:lambda ___________:lambda ______:(lambda ____:(lambda _:_(lambda __________:lambda _____:__________))(____))(___________)(lambda _:(lambda __________:lambda _____:__________))(lambda _:(lambda __________:lambda _____:__________(_____)(lambda __________:lambda _____:_____))((lambda __________:lambda _____:(lambda __________:lambda _____:__________(_____)(lambda __________:lambda _____:_____))((lambda __________:lambda _____:(lambda __________:__________(lambda _:(lambda __________:lambda _____:_____))(lambda __________:lambda _____:__________)) [.</description>
    </item>
    
  </channel>
</rss>
